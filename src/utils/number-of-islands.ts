// https://leetcode-cn.com/problems/number-of-islands/

function numIslands(grid: string[][]): number {
    const accessedTable: boolean[][] = [];
    let count = 0;

    for (let i = 0; i < grid.length; i ++) {
        const accessedList: boolean[] = [];
        for (let j = 0; j < grid[i].length; j ++) {
            accessedList.push(false)
        }
        accessedTable.push(accessedList)
    }

    for (let i = 0; i < grid.length; i ++) {

        for (let j = 0; j < grid[i].length; j ++) {

            if (accessedTable[i][j] === true || grid[i][j] === "0") {
                continue;
            }
            count ++;
            const originNode: [number, number] = [i, j];
            const queen = [originNode];
            const originValue = grid[i][j];
            broad:while(queen.length) {
                const [m, n] = queen.shift();
                if (accessedTable[m][n] === true) {
                    continue broad;
                }
                accessedTable[m][n] = true;
                const arround: [number, number][] = [
                    [m + 1, n],
                    [m - 1, n],
                    [m, n - 1],
                    [m, n + 1]
                ];
                for (let k = 0; k < arround.length; k ++) {
                    const [x, y] = arround[k];
                    if (grid[x] && accessedTable[x][y] === false && grid[x][y] === originValue ) {
                        queen.push(arround[k])
                    }
                }
            }
        }
    }

    return count
};

export {
    numIslands
}

const grid1 = [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]];
const grid2 = [["1","1","0","0","0"],["1","1","0","0","0"],["0","0","1","0","0"],["0","0","0","1","1"]];
const grid3 = [["1"],["1"]];
const grid4 = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]];

console.log(
    // numIslands(grid1),
    // numIslands(grid2),
    // numIslands(grid3),
    numIslands(grid4)
)